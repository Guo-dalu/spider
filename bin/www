#!/usr/bin/env node

/**
 * Module dependencies.
 */
global.__DEVELOPMENT__ = 'development'
global.__TEST__ = 'test'
global.__PRODUCTION__ = 'production'
// eslint-disable-next-line
global.__ENV__ = process.env.NODE_ENV === __PRODUCTION__ ? __PRODUCTION__
  : process.env.NODE_ENV === global.__TEST__ ? global.__TEST__
    : global.__DEVELOPMENT__

require('babel-polyfill')
require('babel-register')

const debug = require('debug')('demo:server')
const http = require('http')
const app = require('../app')

/**
 * Get port from environment and store in Express.
 */

const port = process.env.PORT || '3000'
// app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback())

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`)
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`
  debug(`Listening on ${bind}`)
}

server.on('error', onError)
server.on('listening', onListening)
